package com.atomictheory.meepmeeptesting;

import com.acmerobotics.roadrunner.geometry.Pose2d;
import com.acmerobotics.roadrunner.geometry.Vector2d;
import com.noahbres.meepmeep.MeepMeep;
import com.noahbres.meepmeep.core.ExtensionsKt;
import com.noahbres.meepmeep.core.colorscheme.scheme.ColorSchemeRedDark;
import com.noahbres.meepmeep.roadrunner.Constraints;
import com.noahbres.meepmeep.roadrunner.DefaultBotBuilder;
import com.noahbres.meepmeep.roadrunner.entity.RoadRunnerBotEntity;


public class MeepMeepTesting {

    public static void main(String[] args) {
        MeepMeep mm = new MeepMeep(800);
        Constraints constraints = new Constraints(40, 30, Math.toRadians(180), Math.toRadians(180), 12.8);
        Constraints cephConstraints = new Constraints(60, 60, Math.toRadians(180), Math.toRadians(180), 11.5);

        RoadRunnerBotEntity blueCycleBot = new DefaultBotBuilder(mm)
                .setDimensions(11.95, 13.8)
                .setColorScheme(new ColorSchemeRedDark())
                .setConstraints(constraints)
                .followTrajectorySequence(drive ->

                        drive.trajectorySequenceBuilder(new Pose2d(12, 64, Math.toRadians(90)))
//                                .lineToLinearHeading(new Pose2d(2,32, Math.toRadians(-45)))
//                                .waitSeconds(2)
//                                .lineToLinearHeading(new Pose2d(8,64,Math.toRadians(0)))
//
//                                .forward(32)
//                                .lineTo(new Vector2d(8, 64))
//                                .lineToLinearHeading(new Pose2d(2, 32, Math.toRadians(-45)))
//                                .waitSeconds(1)
//                                .lineToLinearHeading(new Pose2d(8, 64, Math.toRadians(0)))
//
//                                .forward(32)
//                                .lineTo(new Vector2d(8, 64))
//                                .lineToLinearHeading(new Pose2d(2, 32, Math.toRadians(-45)))
//                                .waitSeconds(1)
//                                .lineToLinearHeading(new Pose2d(8, 64, Math.toRadians(0)))
//
//                                .forward(32)
//                                .lineTo(new Vector2d(8, 64))
//                                .lineToLinearHeading(new Pose2d(2, 32, Math.toRadians(-45)))
//                                .waitSeconds(1)
//                                .lineToLinearHeading(new Pose2d(8, 64, Math.toRadians(0)))
//                                .forward(30)
//
//                                .lineToLinearHeading(new Pose2d(38, 38, Math.toRadians(90)))
//                                .strafeRight(25)

//
//                                .lineToLinearHeading(new Pose2d(2,32, Math.toRadians(-45)))
//                                .waitSeconds(2)
//                                .lineToLinearHeading(new Pose2d(8,64,Math.toRadians(0)))
//
//                                .forward(32)
//                                .lineTo(new Vector2d(8, 64))
//                                .lineToLinearHeading(new Pose2d(2, 32, Math.toRadians(-45)))
//                                .waitSeconds(1)
//                                .lineToLinearHeading(new Pose2d(8, 64, Math.toRadians(0)))
//
//                                .forward(32)
//                                .lineTo(new Vector2d(8, 64))
//                                .lineToLinearHeading(new Pose2d(2, 32, Math.toRadians(-45)))
//                                .waitSeconds(1)
//                                .lineToLinearHeading(new Pose2d(8, 64, Math.toRadians(0)))
//
//                                .forward(32)
//                                .lineTo(new Vector2d(8, 64))
//                                .lineToLinearHeading(new Pose2d(2, 32, Math.toRadians(-45)))
//                                .waitSeconds(1)
//                                .lineToLinearHeading(new Pose2d(8, 64, Math.toRadians(0)))
//                                .forward(30)
//
//                                .lineToLinearHeading(new Pose2d(38, 38, Math.toRadians(90)))
//                                .strafeRight(25)
//
//
//
//                                .build()
//                );
//                .followTrajectorySequence(drive -> drive.trajectorySequenceBuilder(new Pose2d(12, 64, Math.toRadians(90)))
////                        .strafeLeft(1.5)
////                        .back(15)
////                        .turn(Math.toRadians(-40))
////                        .back(14)
////                        .forward(14)
////                        .turn(Math.toRadians(-50))
////                        .forward(30)
////                        .back(30)
////                        .turn(Math.toRadians(50))
////                        .back(14)
////                        .forward(14)
////                        .turn(Math.toRadians(-50))
////                        .forward(30)
                                .waitSeconds(2)
                                .setReversed(true)
                                .splineTo(new Vector2d(-5, 39), Math.toRadians(-110))
                                .setReversed(false)
                                .splineTo(new Vector2d(16, 66), Math.toRadians(0))
                                .splineTo(new Vector2d(46, 66), Math.toRadians(0))
                                .setReversed(true)
                                .splineTo(new Vector2d(16, 66), Math.toRadians(180))
                                .splineTo(new Vector2d(-5, 39), Math.toRadians(-110))
                                .setReversed(false)
                                .splineTo(new Vector2d(16, 66), Math.toRadians(0))
                                .splineTo(new Vector2d(46, 66), Math.toRadians(0))
                                .setReversed(true)
                                .splineTo(new Vector2d(16, 66), Math.toRadians(180))
                                .splineTo(new Vector2d(-5, 39), Math.toRadians(-110))
                                .setReversed(false)
                                .splineTo(new Vector2d(16, 66), Math.toRadians(0))
                                .splineTo(new Vector2d(46, 66), Math.toRadians(0))
                                .setReversed(true)
                                .splineTo(new Vector2d(16, 66), Math.toRadians(180))
                                .splineTo(new Vector2d(-5, 39), Math.toRadians(-110))
                                .setReversed(false)
                                .splineTo(new Vector2d(16, 66), Math.toRadians(0))
                                .splineTo(new Vector2d(46, 66), Math.toRadians(0))
                                .build());


        RoadRunnerBotEntity blueCarouselBot = new DefaultBotBuilder(mm)
                .setDimensions(11.95, 13.8)
                .setColorScheme(new ColorSchemeRedDark())
                .setConstraints(cephConstraints)
                .followTrajectorySequence(drive -> drive.trajectorySequenceBuilder(new Pose2d(-36, 64, Math.toRadians(90)))
                        .lineToLinearHeading(new Pose2d(-62, 50, Math.toRadians(0)))
                        .strafeLeft(5)
                        .waitSeconds(3)
                        .lineToLinearHeading(new Pose2d(-53, 24, Math.toRadians(90)))
                        .strafeTo(new Vector2d(-28, 24))
                        .waitSeconds(1)
                        .lineToLinearHeading(new Pose2d(-62, 24, Math.toRadians(0)))
                        .strafeLeft(12)


                        .build());
//                        .waitSeconds(2)
//                        .setReversed(true)
//                        .splineTo(new Vector2d(-18, 40), Math.toRadians(-70))
//                        .waitSeconds(1)
//                        .setReversed(false)
//                        .splineToLinearHeading(new Pose2d(-62, 63, Math.toRadians(330)), Math.toRadians(110))
//                        .waitSeconds(1)
//                        .splineToLinearHeading(new Pose2d(-55, 58, Math.toRadians(90)), Math.toRadians(-90))
//                        .forward(8)
//                        .setReversed(true)
//                        .splineTo(new Vector2d(-18, 40), Math.toRadians(-70))
//                        .waitSeconds(1)
//                        .setReversed(false)
//                        .splineTo(new Vector2d(-60, 36), Math.toRadians(270))
//                        .build());
        RoadRunnerBotEntity redCycleBot = new DefaultBotBuilder(mm)
                .setDimensions(11.95, 13.8)
                .setColorScheme(new ColorSchemeRedDark())
                .setConstraints(constraints)
                .followTrajectorySequence(drive -> drive.trajectorySequenceBuilder(new Pose2d(12, -64, Math.toRadians(-90)))
                        .setReversed(true)
                        .splineTo(new Vector2d(-6, -40), Math.toRadians(110))
                        .waitSeconds(1.13)
                        .setReversed(false)
                        .splineTo(new Vector2d(15, -48), Math.toRadians(0))
                        .splineTo(new Vector2d(36, -48), Math.toRadians(0))
                        .setReversed(true)
                        .splineTo(new Vector2d(15, -40), Math.toRadians(180))
                        .splineTo(new Vector2d(2, -34), Math.toRadians(140))
                        .waitSeconds(1.13)
                        .setReversed(false)
                        .splineTo(new Vector2d(15, -40), Math.toRadians(0))
                        .splineTo(new Vector2d(36, -40), Math.toRadians(0))
                        .splineTo(new Vector2d(47, -48), Math.toRadians(-45))
                        .setReversed(true)
                        .splineTo(new Vector2d(15, -40), Math.toRadians(180))
                        .splineTo(new Vector2d(2, -34), Math.toRadians(140))
                        .waitSeconds(1.13)
                        .setReversed(false)
                        .splineTo(new Vector2d(15, -40), Math.toRadians(0))
                        .splineTo(new Vector2d(36, -40), Math.toRadians(0))
                        .splineTo(new Vector2d(47, -48), Math.toRadians(-45))
                        .setReversed(true)
                        .splineTo(new Vector2d(15, -40), Math.toRadians(180))
                        .splineTo(new Vector2d(2, -34), Math.toRadians(140))
                        .waitSeconds(1.13)
                        .setReversed(false)
                        .splineTo(new Vector2d(15, -40), Math.toRadians(0))
                        .splineTo(new Vector2d(36, -40), Math.toRadians(0))
                        .build());
//                        .splineTo(new Vector2d(16, -46), Math.toRadians(0))
//                        .splineTo(new Vector2d(36, -46), Math.toRadians(0))
//                        .splineTo(new Vector2d(44, -48), Math.toRadians(-20))
//                        .setReversed(true)
//                        .splineTo(new Vector2d(36, -46), Math.toRadians(180))
//                        .splineTo(new Vector2d(16, -46), Math.toRadians(180))
//                        .splineTo(new Vector2d(0, -37), Math.toRadians(135))
//                        .setReversed(false)
//                        .splineTo(new Vector2d(16, -46), Math.toRadians(0))
//                        .splineTo(new Vector2d(36, -46), Math.toRadians(0))
//                        .splineTo(new Vector2d(44, -48), Math.toRadians(-20))
//                        .setReversed(true)
//                        .splineTo(new Vector2d(36, -46), Math.toRadians(180))
//                        .splineTo(new Vector2d(16, -46), Math.toRadians(180))
//                        .splineTo(new Vector2d(0, -37), Math.toRadians(135))
//                        .setReversed(false)
//                        .splineTo(new Vector2d(16, -46), Math.toRadians(0))
//                        .splineTo(new Vector2d(36, -46), Math.toRadians(0))
//                        .splineTo(new Vector2d(44, -48), Math.toRadians(-20))
//                        .setReversed(true)
//                        .splineTo(new Vector2d(36, -46), Math.toRadians(180))
//                        .splineTo(new Vector2d(16, -46), Math.toRadians(180))
//                        .splineTo(new Vector2d(0, -37), Math.toRadians(135))
//                        .setReversed(false)
//                        .splineTo(new Vector2d(16, -46), Math.toRadians(0))
//                        .splineTo(new Vector2d(36, -46), Math.toRadians(0))
//                        .splineTo(new Vector2d(44, -48), Math.toRadians(-20))
//                        .setReversed(true)
//                        .splineTo(new Vector2d(36, -46), Math.toRadians(180))
//                        .splineTo(new Vector2d(16, -46), Math.toRadians(180))
//                        .splineTo(new Vector2d(0, -37), Math.toRadians(135))
//                        .setReversed(false)
//                        .splineTo(new Vector2d(16, -46), Math.toRadians(0))
//                        .splineTo(new Vector2d(36, -46), Math.toRadians(0))
//                        .splineTo(new Vector2d(44, -48), Math.toRadians(-20))
//                        .setReversed(true)
//                        .splineTo(new Vector2d(36, -46), Math.toRadians(180))
//                        .splineTo(new Vector2d(16, -46), Math.toRadians(180))
//                        .splineTo(new Vector2d(0, -37), Math.toRadians(135))
//                        .setReversed(false)
//                        .splineTo(new Vector2d(16, -46), Math.toRadians(0))
//                        .splineTo(new Vector2d(36, -46), Math.toRadians(0))
//                        .splineTo(new Vector2d(44, -48), Math.toRadians(-20))
//                        .setReversed(true)
//                        .splineTo(new Vector2d(36, -46), Math.toRadians(180))
//                        .splineTo(new Vector2d(16, -46), Math.toRadians(180))
//                        .splineTo(new Vector2d(0, -37), Math.toRadians(135))
//                        .setReversed(false)
//                        .splineTo(new Vector2d(16, -46), Math.toRadians(0))
//                        .splineTo(new Vector2d(36, -46), Math.toRadians(0))
//                        .build());

        RoadRunnerBotEntity redCarouselBot = new DefaultBotBuilder(mm)
                .setDimensions(11.95, 13.8)
                .setColorScheme(new ColorSchemeRedDark())
                .setConstraints(constraints)
                .followTrajectorySequence(drive -> drive.trajectorySequenceBuilder(new Pose2d(-36, -64, Math.toRadians(-90)))
//                        .strafeLeft(1.5)
//                        .back(12)
//                        .turn(Math.toRadians(-40))
//                        .back(19)
//                        .forward(28)
//                        .turn(Math.toRadians(-140))
//                        .strafeLeft(15)
//                        .forward(3)
//                        .strafeRight(5)
//                        .forward(90)
                        .waitSeconds(2)
                        .setReversed(true)
                        .splineTo(new Vector2d(-24, -37), Math.toRadians(45))
                        .waitSeconds(1)
                        .forward(8)
                        .turn(Math.toRadians(140))
                        .splineTo(new Vector2d(-55, -55), Math.toRadians(-135))
                        .setReversed(false)
                        .waitSeconds(1)
                        .forward(5)
                        .turn(Math.toRadians(-135))
                        .forward(8)
                        .setReversed(true)
                        .splineTo(new Vector2d(-24, -37), Math.toRadians(45))
                        .addTemporalMarker(() -> System.out.println(blueCarouselBot.getPose()))
                        .waitSeconds(1)
                        .setReversed(false)
                        .splineTo(new Vector2d(-60, -36), Math.toRadians(90))
                        .build());
//                        .splineTo(new Vector2d(44, -64), Math.toRadians(0))
//                        .setReversed(true)
//                        .splineTo(new Vector2d(-12, -42), Math.toRadians(90))
//                        .setReversed(false)
//                        .splineTo(new Vector2d(44, -64), Math.toRadians(0))
//                        .setReversed(true)
//                        .splineTo(new Vector2d(-12, -42), Math.toRadians(90))
//                        .setReversed(false)
//                        .splineTo(new Vector2d(44, -64), Math.toRadians(0))
//                        .build());
        mm
                .setBackground(MeepMeep.Background.FIELD_FREIGHTFRENZY_OFFICIAL)
                // Set theme
                .setTheme(new ColorSchemeRedDark())
                // Background opacity from 0-1
                .setBackgroundAlpha(1f)
                .addEntity(blueCycleBot)
                .addEntity(blueCarouselBot)
                .addEntity(redCycleBot)
                .addEntity(redCarouselBot)
                .start();
    }
}